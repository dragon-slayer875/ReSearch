// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type CreateUrlsParams struct {
	ID         string
	Url        string
	StatusCode pgtype.Int4
	FetchedAt  pgtype.Timestamp
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM urls
WHERE id = $1
`

func (q *Queries) DeleteUrl(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteUrl, id)
	return err
}

const getUrl = `-- name: GetUrl :one
SELECT id, url, status_code, fetched_at FROM urls
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUrl(ctx context.Context, id string) (Url, error) {
	row := q.db.QueryRow(ctx, getUrl, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.StatusCode,
		&i.FetchedAt,
	)
	return i, err
}

const listUrls = `-- name: ListUrls :many
SELECT id, url, status_code, fetched_at FROM urls
ORDER BY fetched_at DESC
`

func (q *Queries) ListUrls(ctx context.Context) ([]Url, error) {
	rows, err := q.db.Query(ctx, listUrls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.Url,
			&i.StatusCode,
			&i.FetchedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUrl = `-- name: UpdateUrl :exec
UPDATE urls
  set url = $2,
  status_code = $3
WHERE id = $1
RETURNING id, url, status_code, fetched_at
`

type UpdateUrlParams struct {
	ID         string
	Url        string
	StatusCode pgtype.Int4
}

func (q *Queries) UpdateUrl(ctx context.Context, arg UpdateUrlParams) error {
	_, err := q.db.Exec(ctx, updateUrl, arg.ID, arg.Url, arg.StatusCode)
	return err
}
