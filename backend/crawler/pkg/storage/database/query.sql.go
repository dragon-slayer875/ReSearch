// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRobotRules = `-- name: CreateRobotRules :exec
INSERT INTO robot_rules (
  domain, rules_json, fetched_at
) VALUES (
  $1, $2, $3
)
`

type CreateRobotRulesParams struct {
	Domain    string
	RulesJson []byte
	FetchedAt pgtype.Timestamp
}

func (q *Queries) CreateRobotRules(ctx context.Context, arg CreateRobotRulesParams) error {
	_, err := q.db.Exec(ctx, createRobotRules, arg.Domain, arg.RulesJson, arg.FetchedAt)
	return err
}

type CreateUrlsParams struct {
	ID        pgtype.UUID
	Url       string
	FetchedAt pgtype.Timestamp
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM urls
WHERE url = $1
`

func (q *Queries) DeleteUrl(ctx context.Context, url string) error {
	_, err := q.db.Exec(ctx, deleteUrl, url)
	return err
}

const getRobotRules = `-- name: GetRobotRules :one
SELECT domain, rules_json, fetched_at FROM robot_rules
WHERE domain = $1
`

func (q *Queries) GetRobotRules(ctx context.Context, domain string) (RobotRule, error) {
	row := q.db.QueryRow(ctx, getRobotRules, domain)
	var i RobotRule
	err := row.Scan(&i.Domain, &i.RulesJson, &i.FetchedAt)
	return i, err
}

const getUrl = `-- name: GetUrl :one
SELECT id, url, fetched_at FROM urls
WHERE url = $1 LIMIT 1
`

func (q *Queries) GetUrl(ctx context.Context, url string) (Url, error) {
	row := q.db.QueryRow(ctx, getUrl, url)
	var i Url
	err := row.Scan(&i.ID, &i.Url, &i.FetchedAt)
	return i, err
}

const updateRobotRules = `-- name: UpdateRobotRules :exec
UPDATE robot_rules
  SET rules_json = $2, fetched_at = $3
WHERE domain = $1
`

type UpdateRobotRulesParams struct {
	Domain    string
	RulesJson []byte
	FetchedAt pgtype.Timestamp
}

func (q *Queries) UpdateRobotRules(ctx context.Context, arg UpdateRobotRulesParams) error {
	_, err := q.db.Exec(ctx, updateRobotRules, arg.Domain, arg.RulesJson, arg.FetchedAt)
	return err
}

const updateUrlStatus = `-- name: UpdateUrlStatus :exec
UPDATE urls
  SET fetched_at = $2
WHERE url = $1
`

type UpdateUrlStatusParams struct {
	Url       string
	FetchedAt pgtype.Timestamp
}

func (q *Queries) UpdateUrlStatus(ctx context.Context, arg UpdateUrlStatusParams) error {
	_, err := q.db.Exec(ctx, updateUrlStatus, arg.Url, arg.FetchedAt)
	return err
}
