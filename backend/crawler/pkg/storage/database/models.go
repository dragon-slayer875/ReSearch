// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type CrawlStatus string

const (
	CrawlStatusPending   CrawlStatus = "pending"
	CrawlStatusCompleted CrawlStatus = "completed"
)

func (e *CrawlStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CrawlStatus(s)
	case string:
		*e = CrawlStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CrawlStatus: %T", src)
	}
	return nil
}

type NullCrawlStatus struct {
	CrawlStatus CrawlStatus
	Valid       bool // Valid is true if CrawlStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCrawlStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CrawlStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CrawlStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCrawlStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CrawlStatus), nil
}

type RobotRule struct {
	Domain    string
	Rules     []byte
	FetchedAt pgtype.Timestamp
}

type Url struct {
	Url       string
	FetchedAt pgtype.Timestamp
}
